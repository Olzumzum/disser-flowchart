[{"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\index.js":"1","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\reportWebVitals.js":"2","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\EditorApp.tsx":"3","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\panel\\EditPanel.tsx":"4","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\panel\\ComponentPanel.tsx":"5","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\ItemTypes.ts":"6","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\primitives\\SubroutineBlockEx.tsx":"7","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\primitives\\BlockTypes.ts":"8","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\primitives\\ParentBlock.tsx":"9","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\primitives\\ConditionBlock.tsx":"10","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\factory\\originBlocks.tsx":"11","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\dnd\\CustomDragLayer.tsx":"12","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\dnd\\BlockDragPreview.tsx":"13","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\dnd\\DraggableBlock.tsx":"14","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\dnd\\snapToGrid.ts":"15","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\dnd\\RendrerManager.tsx":"16","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\primitives\\IBlock.tsx":"17","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\factory\\CreatorBlock.tsx":"18","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\store\\index.ts":"19","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\store\\reducers\\blockReducer.tsx":"20","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\store\\actions.tsx":"21","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\store\\reducers\\index.ts":"22","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\hooks\\blocksTypedSelector.tsx":"23","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\hooks\\blockActions.tsx":"24","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\store\\action-creators\\index.ts":"25","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\store\\action-creators\\blocks.tsx":"26","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\assets\\errorMessadges.tsx":"27"},{"size":376,"mtime":1613302676500,"results":"28","hashOfConfig":"29"},{"size":362,"mtime":499162500000,"results":"30","hashOfConfig":"29"},{"size":1600,"mtime":1616412953674,"results":"31","hashOfConfig":"29"},{"size":3889,"mtime":1616245921674,"results":"32","hashOfConfig":"29"},{"size":1392,"mtime":1616578721151,"results":"33","hashOfConfig":"29"},{"size":50,"mtime":1613302676535,"results":"34","hashOfConfig":"29"},{"size":1514,"mtime":1616141467735,"results":"35","hashOfConfig":"29"},{"size":394,"mtime":1613818181909,"results":"36","hashOfConfig":"29"},{"size":2934,"mtime":1616142109195,"results":"37","hashOfConfig":"29"},{"size":1824,"mtime":1616143199965,"results":"38","hashOfConfig":"29"},{"size":326,"mtime":1614689031775,"results":"39","hashOfConfig":"29"},{"size":2114,"mtime":1615709573144,"results":"40","hashOfConfig":"29"},{"size":955,"mtime":1614691532612,"results":"41","hashOfConfig":"29"},{"size":1932,"mtime":1616141215043,"results":"42","hashOfConfig":"29"},{"size":196,"mtime":1613302676499,"results":"43","hashOfConfig":"29"},{"size":1790,"mtime":1616487109941,"results":"44","hashOfConfig":"29"},{"size":430,"mtime":1615804490244,"results":"45","hashOfConfig":"29"},{"size":1184,"mtime":1616142012493,"results":"46","hashOfConfig":"29"},{"size":199,"mtime":1616487666203,"results":"47","hashOfConfig":"29"},{"size":937,"mtime":1616485638775,"results":"48","hashOfConfig":"29"},{"size":199,"mtime":1616486454722,"results":"49","hashOfConfig":"29"},{"size":220,"mtime":1616487511543,"results":"50","hashOfConfig":"29"},{"size":195,"mtime":1616578073693,"results":"51","hashOfConfig":"29"},{"size":272,"mtime":1616578052777,"results":"52","hashOfConfig":"29"},{"size":97,"mtime":1616487649467,"results":"53","hashOfConfig":"29"},{"size":1121,"mtime":1616486716008,"results":"54","hashOfConfig":"29"},{"size":105,"mtime":1616485815658,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"jcib30",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"66"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"66"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"66"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"66"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"66"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\index.js",[],["119","120"],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\reportWebVitals.js",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\EditorApp.tsx",["121","122"],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\panel\\EditPanel.tsx",["123","124","125","126","127"],"import {CSSProperties, FC, useCallback, useState} from \"react\";\r\nimport {useDrop} from \"react-dnd\";\r\nimport {ItemTypes} from \"../ItemTypes\";\r\nimport {DragItem} from \"../dnd/DragItem\";\r\nimport {snapToGrid as doSnapToGrid} from '../dnd/snapToGrid'\r\nimport update from \"immutability-helper\";\r\n\r\nimport {IBlock} from \"../blocks/primitives/IBlock\";\r\nimport {CreatorBlock} from \"../blocks/factory/CreatorBlock\";\r\nimport {IBlockFactory} from \"../blocks/factory/IBlockFactory\";\r\nimport {BlockMap1, RendrerManager} from \"../dnd/RendrerManager\";\r\nimport {render} from \"react-dom\";\r\n\r\n\r\nconst styles: CSSProperties = {\r\n    margin: 0,\r\n    float: \"right\",\r\n    width: \"79%\",\r\n    height: 400,\r\n    border: '1px solid black',\r\n    backgroundColor: 'aqua'\r\n    // position: 'relative',\r\n}\r\n\r\n\r\nexport interface EditPanelProps {\r\n    snapToGrid: boolean\r\n}\r\n\r\nconst renderManager = new RendrerManager()\r\n\r\n\r\nfunction getWidthComponentPanel(): number | null {\r\n    const element = document.getElementById(\"component_panel\")\r\n\r\n    if (element != null) {\r\n        return Number(element.offsetWidth)\r\n    } else\r\n        return null\r\n}\r\n\r\n//генерация уникального id\r\nexport function generateId(): string {\r\n    return `f${(~~(Math.random() * 1e8)).toString(16)}`\r\n}\r\n\r\nlet arBlock: Array<IBlock> = new Array<IBlock>()\r\n\r\nconst creator: IBlockFactory = new CreatorBlock()\r\n\r\nconst originalBlocks = creator.getOriginBlock()\r\nlet fd: Array<BlockMap1> = new Array<BlockMap1>()\r\n\r\nexport const EditPanel: FC<EditPanelProps> = ({snapToGrid}) => {\r\n    const moveBlock = useCallback(\r\n        (id: string, left: number, top: number) => {\r\n            let flag = false\r\n            //проверка - блок добавляется с панели перечисления\r\n            // возможных компонентов (Component Panel) или нет\r\n            Object.keys(originalBlocks).map((id) => {\r\n                    if (!id.localeCompare(id)) {\r\n                        flag = true\r\n                    }\r\n                }\r\n            )\r\n            if (flag) {\r\n                // console.log(\"in flag\" + id + \" \" + left + \" \" + top)\r\n                //создаем новый id для добавляемого блока\r\n                let idNew: string = generateId()\r\n                arBlock.push(creator.createBlock(\r\n                    originalBlocks[Number(id)].getTypeBlock(),\r\n                    left - getWidthComponentPanel()!!,\r\n                    top,\r\n                    idNew\r\n                )!!)\r\n\r\n            } else {\r\n                arBlock[Number(id)].setLeft(left)\r\n                arBlock[Number(id)].setTop(top)\r\n            }\r\n\r\n            fd = renderManager.convert(arBlock)\r\n            console.log(\"fd \" + fd.length)\r\n\r\n            fd.forEach(item => {\r\n                console.log(\"id=\" + item.left)\r\n            })\r\n\r\n            console.log(\"list \" + arBlock.length)\r\n\r\n\r\n        },\r\n        [arBlock],\r\n\r\n    )\r\n\r\n    const [, drop] = useDrop({\r\n        accept: ItemTypes.BLOCK,\r\n        drop(item: DragItem, monitor) {\r\n            const delta = monitor.getDifferenceFromInitialOffset() as {\r\n                x: number\r\n                y: number\r\n            }\r\n\r\n            let left = Math.round(item.left + delta.x)\r\n            let top = Math.round(item.top + delta.y)\r\n\r\n            if (snapToGrid) {\r\n                ;[left, top] = doSnapToGrid(left, top)\r\n            }\r\n            // console.log(\"element in drop \" + item.id)\r\n            moveBlock(item.id, left, top)\r\n            return undefined\r\n        },\r\n    })\r\n\r\n\r\n\r\n    return (\r\n\r\n        <div>\r\n            <div ref={drop} style={styles}>\r\n                {/*{ arBlock.length}*/}\r\n                {Object.keys(arBlock).map((key) =>\r\n                  renderManager.render(renderManager.convert(arBlock)))}\r\n            </div>\r\n        </div>\r\n    )\r\n}",["128","129"],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\panel\\ComponentPanel.tsx",["130","131","132","133"],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\ItemTypes.ts",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\primitives\\SubroutineBlockEx.tsx",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\primitives\\BlockTypes.ts",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\primitives\\ParentBlock.tsx",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\primitives\\ConditionBlock.tsx",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\factory\\originBlocks.tsx",[],["134","135"],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\dnd\\CustomDragLayer.tsx",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\dnd\\BlockDragPreview.tsx",["136"],"import {CSSProperties, FC, memo, useEffect, useState} from \"react\";\r\n\r\n/**\r\n * Рисует блок при dnd\r\n */\r\nconst styles: CSSProperties = {\r\n    display: 'inline-block',\r\n    transform: 'rotate(-7deg)',\r\n    WebkitTransform: 'rotate(-7deg)',\r\n}\r\n\r\nexport interface BlockDragPreviewProps {\r\n    title: string\r\n    typeBlock: string\r\n}\r\n\r\nexport const BlockDragPreview: FC<BlockDragPreviewProps> = memo(({title}, {typeBlock}) => {\r\n        const [tickTock, setTickTock] = useState(false)\r\n\r\n        useEffect(\r\n            function subscribeToIntervalTick() {\r\n                const interval = setInterval(() => setTickTock(!tickTock), 500)\r\n                return () => clearInterval(interval)\r\n            },\r\n            [tickTock]\r\n        )\r\n\r\n\r\n\r\n        return (\r\n            <div style={styles}>\r\n                {/*<SubroutineBlockEx title={typeBlock} yellow={tickTock} left={0} top={0}/>*/}\r\n            </div>\r\n        )\r\n    }\r\n)","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\dnd\\DraggableBlock.tsx",["137"],"import {CSSProperties, FC, useEffect} from \"react\";\r\nimport {DragSourceMonitor, useDrag} from \"react-dnd\";\r\nimport {ItemTypes} from \"../ItemTypes\";\r\nimport {getEmptyImage} from \"react-dnd-html5-backend\";\r\nimport {IBlockFactory} from \"../blocks/factory/IBlockFactory\";\r\nimport {CreatorBlock} from \"../blocks/factory/CreatorBlock\";\r\nimport {IBlock} from \"../blocks/primitives/IBlock\";\r\n\r\nfunction getStyles(\r\n    left: number,\r\n    top: number,\r\n    isDragging: boolean\r\n): CSSProperties {\r\n    const transform = `translate3d(${left}px, ${top}px, 0)`\r\n    return {\r\n        position: 'absolute',\r\n        transform,\r\n        WebkitTransform: transform,\r\n        // IE fallback: hide the real node using CSS when dragging\r\n        // because IE will ignore our custom \"empty image\" drag preview.\r\n        opacity: isDragging ? 0 : 1,\r\n        height: isDragging ? 0 : '',\r\n    }\r\n}\r\n\r\nexport interface DraggableBlockProps {\r\n    id: string\r\n    title: string\r\n    left: number\r\n    top: number\r\n    typeBlock: string\r\n}\r\n\r\nfunction selectTypeBlock(\r\n    typeBlock: string, title: string, left: number, top: number, id: string\r\n): IBlock | undefined {\r\n    const blockFactory: IBlockFactory = new CreatorBlock()\r\n    return blockFactory.createBlock(typeBlock, left, top, id)\r\n}\r\n\r\nexport const DraggableBlock: FC<DraggableBlockProps> = (props) => {\r\n    const {left, top, title, typeBlock, id} = props\r\n\r\n    const [{isDragging}, drag, preview] = useDrag({\r\n        item: {type: ItemTypes.BLOCK, left, top, title, typeBlock, id},\r\n        collect: (monitor: DragSourceMonitor) => ({\r\n            isDragging: monitor.isDragging(),\r\n        }),\r\n    })\r\n\r\n    useEffect(() => {\r\n        preview(getEmptyImage(), {captureDraggingState: true})\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div ref={drag} style={getStyles(left, top, isDragging)}>\r\n            {selectTypeBlock(typeBlock, title, left, top, id)?.render()}\r\n        </div>\r\n    )\r\n}","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\dnd\\snapToGrid.ts",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\dnd\\RendrerManager.tsx",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\primitives\\IBlock.tsx",["138"],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\factory\\CreatorBlock.tsx",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\store\\index.ts",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\store\\reducers\\blockReducer.tsx",["139","140","141"],"import {IBlock} from \"../../editor/blocks/primitives/IBlock\";\r\nimport {CreatorBlock} from \"../../editor/blocks/factory/CreatorBlock\";\r\nimport {IBlockFactory} from \"../../editor/blocks/factory/IBlockFactory\";\r\nimport {BlocksActionTypes} from \"../actions\";\r\nimport {BlocksAction, BlockState} from \"../types/blocks\";\r\n\r\n\r\nconst initialState: BlockState = {\r\n    blocks: [],\r\n    loading: false,\r\n    error: null,\r\n}\r\n\r\nexport const blockReducer = (state: BlockState = initialState, action: BlocksAction): BlockState => {\r\n    switch (action.type){\r\n        case BlocksActionTypes.FETCH_BLOCKS:\r\n            return {...state, loading: true}\r\n        case BlocksActionTypes.FETCH_BLOCKS_SUCCESS:\r\n            return {...state, loading: false, blocks: action.payload}\r\n        case BlocksActionTypes.FETCH_BLOCKS_ERROR:\r\n            return {...state, loading: false, error: action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\store\\actions.tsx",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\store\\reducers\\index.ts",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\hooks\\blocksTypedSelector.tsx",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\hooks\\blockActions.tsx",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\store\\action-creators\\index.ts",["142"],"import * as BlockActionCreator from './blocks'\r\n\r\nexport default {\r\n    ...BlockActionCreator,\r\n}","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\store\\action-creators\\blocks.tsx",["143"],"import {BlocksAction} from \"../types/blocks\";\r\nimport {Dispatch} from \"redux\";\r\nimport {BlocksActionTypes} from \"../actions\";\r\nimport {IBlockFactory} from \"../../editor/blocks/factory/IBlockFactory\";\r\nimport {CreatorBlock} from \"../../editor/blocks/factory/CreatorBlock\";\r\nimport {DATA_LOADING_ERROR} from \"../../assets/errorMessadges\";\r\nimport {IBlock} from \"../../editor/blocks/primitives/IBlock\";\r\n\r\nconst creatorBlocks: IBlockFactory = new CreatorBlock()\r\nconst originalBlocks = creatorBlocks.getOriginBlock()\r\n\r\n\r\nexport const fetchBlocks = () => {\r\n    return async (dispatch: Dispatch<BlocksAction>) => {\r\n        try {\r\n            dispatch({type: BlocksActionTypes.FETCH_BLOCKS})\r\n            const response = originalBlocks\r\n            dispatch({\r\n                type: BlocksActionTypes.FETCH_BLOCKS_SUCCESS, payload: response\r\n            })\r\n        } catch (e) {\r\n            dispatch({\r\n                type: BlocksActionTypes.FETCH_BLOCKS_ERROR, payload: DATA_LOADING_ERROR\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n// export const addBlocks = (block: IBlock): BlocksAction => {\r\n//     return {type}\r\n// }","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\assets\\errorMessadges.tsx",[],{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","severity":1,"message":"149","line":17,"column":11,"nodeType":"150","messageId":"151","endLine":17,"endColumn":42},{"ruleId":"148","severity":1,"message":"152","line":21,"column":11,"nodeType":"150","messageId":"151","endLine":21,"endColumn":46},{"ruleId":"148","severity":1,"message":"153","line":1,"column":41,"nodeType":"150","messageId":"151","endLine":1,"endColumn":49},{"ruleId":"148","severity":1,"message":"154","line":6,"column":8,"nodeType":"150","messageId":"151","endLine":6,"endColumn":14},{"ruleId":"148","severity":1,"message":"155","line":12,"column":9,"nodeType":"150","messageId":"151","endLine":12,"endColumn":15},{"ruleId":"156","severity":1,"message":"157","line":60,"column":50,"nodeType":"158","messageId":"159","endLine":60,"endColumn":52},{"ruleId":"160","severity":1,"message":"161","line":93,"column":9,"nodeType":"162","endLine":93,"endColumn":18,"suggestions":"163"},{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","severity":1,"message":"164","line":2,"column":9,"nodeType":"150","messageId":"151","endLine":2,"endColumn":22},{"ruleId":"148","severity":1,"message":"165","line":3,"column":9,"nodeType":"150","messageId":"151","endLine":3,"endColumn":21},{"ruleId":"148","severity":1,"message":"166","line":5,"column":9,"nodeType":"150","messageId":"151","endLine":5,"endColumn":21},{"ruleId":"148","severity":1,"message":"167","line":19,"column":5,"nodeType":"150","messageId":"151","endLine":19,"endColumn":15},{"ruleId":"144","replacedBy":"168"},{"ruleId":"146","replacedBy":"169"},{"ruleId":"148","severity":1,"message":"170","line":2,"column":9,"nodeType":"150","messageId":"151","endLine":2,"endColumn":26},{"ruleId":"160","severity":1,"message":"171","line":53,"column":8,"nodeType":"162","endLine":53,"endColumn":10,"suggestions":"172"},{"ruleId":"148","severity":1,"message":"173","line":1,"column":9,"nodeType":"150","messageId":"151","endLine":1,"endColumn":19},{"ruleId":"148","severity":1,"message":"174","line":1,"column":9,"nodeType":"150","messageId":"151","endLine":1,"endColumn":15},{"ruleId":"148","severity":1,"message":"165","line":2,"column":9,"nodeType":"150","messageId":"151","endLine":2,"endColumn":21},{"ruleId":"148","severity":1,"message":"164","line":3,"column":9,"nodeType":"150","messageId":"151","endLine":3,"endColumn":22},{"ruleId":"175","severity":1,"message":"176","line":3,"column":1,"nodeType":"177","endLine":5,"endColumn":2},{"ruleId":"148","severity":1,"message":"174","line":7,"column":9,"nodeType":"150","messageId":"151","endLine":7,"endColumn":15},"no-native-reassign",["178"],"no-negated-in-lhs",["179"],"@typescript-eslint/no-unused-vars","'handleSnapToGridAfterDropChange' is assigned a value but never used.","Identifier","unusedVar","'handleSnapToGridWhileDraggingChange' is assigned a value but never used.","'useState' is defined but never used.","'update' is defined but never used.","'render' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useCallback has an unnecessary dependency: 'arBlock'. Either exclude it or remove the dependency array. Outer scope values like 'arBlock' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["180"],"'IBlockFactory' is defined but never used.","'CreatorBlock' is defined but never used.","'blockReducer' is defined but never used.","'y' is assigned a value but never used.",["178"],["179"],"'SubroutineBlockEx' is defined but never used.","React Hook useEffect has a missing dependency: 'preview'. Either include it or remove the dependency array.",["181"],"'BlockProps' is defined but never used.","'IBlock' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation",{"desc":"182","fix":"183"},{"desc":"184","fix":"185"},"Update the dependencies array to be: []",{"range":"186","text":"187"},"Update the dependencies array to be: [preview]",{"range":"188","text":"189"},[2837,2846],"[]",[1744,1746],"[preview]"]