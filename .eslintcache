[{"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\index.js":"1","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\reportWebVitals.js":"2","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\store\\index.ts":"3","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\store\\action-creators\\blocks.tsx":"4","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\store\\action-creators\\index.ts":"5","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\assets\\errorMessadges.tsx":"6","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\store\\reducers\\index.ts":"7","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\store\\reducers\\blockReducer.tsx":"8","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\store\\actions.tsx":"9","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\components\\editor\\EditorApp.tsx":"10","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\components\\editor\\panel\\EditPanel.tsx":"11","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\components\\editor\\panel\\ComponentPanel.tsx":"12","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\components\\editor\\error\\ErrorMessage.tsx":"13","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\components\\editor\\dnd\\CustomDragLayer.tsx":"14","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\components\\editor\\connections\\ConnectionManager.tsx":"15","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\components\\editor\\dnd\\ItemTypes.ts":"16","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\components\\editor\\dnd\\snapToGrid.ts":"17","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\components\\editor\\dnd\\RendrerManager.tsx":"18","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\components\\editor\\dnd\\BlockDragPreview.tsx":"19","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\components\\editor\\hooks\\blocksTypedSelector.tsx":"20","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\components\\editor\\hooks\\blockActions.tsx":"21","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\components\\editor\\blocks\\factory\\CreatorBlock.tsx":"22","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\components\\editor\\dnd\\DraggableBlock.tsx":"23","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\components\\editor\\blocks\\primitives\\BlockTypes.ts":"24","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\components\\editor\\blocks\\primitives\\SubroutineBlockEx.tsx":"25","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\components\\editor\\blocks\\primitives\\ConditionBlock.tsx":"26","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\components\\editor\\blocks\\primitives\\ParentBlock.tsx":"27","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\store\\action-creators\\clickOnBlocks.ts":"28","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\components\\editor\\connections\\ConnectionBlocks.tsx":"29"},{"size":387,"mtime":1617690636285,"results":"30","hashOfConfig":"31"},{"size":362,"mtime":499162500000,"results":"32","hashOfConfig":"31"},{"size":199,"mtime":1616745806353,"results":"33","hashOfConfig":"31"},{"size":7390,"mtime":1617695619399,"results":"34","hashOfConfig":"31"},{"size":97,"mtime":1616745806352,"results":"35","hashOfConfig":"31"},{"size":366,"mtime":1616745806327,"results":"36","hashOfConfig":"31"},{"size":220,"mtime":1616745806354,"results":"37","hashOfConfig":"31"},{"size":1167,"mtime":1617690636289,"results":"38","hashOfConfig":"31"},{"size":340,"mtime":1617690636288,"results":"39","hashOfConfig":"31"},{"size":1818,"mtime":1617704104102,"results":"40","hashOfConfig":"31"},{"size":4490,"mtime":1617705047585,"results":"41","hashOfConfig":"31"},{"size":1439,"mtime":1617690636327,"results":"42","hashOfConfig":"31"},{"size":1738,"mtime":1617690636281,"results":"43","hashOfConfig":"31"},{"size":2113,"mtime":1617690636333,"results":"44","hashOfConfig":"31"},{"size":773,"mtime":1617705047574,"results":"45","hashOfConfig":"31"},{"size":50,"mtime":1617690636331,"results":"46","hashOfConfig":"31"},{"size":196,"mtime":1617690636329,"results":"47","hashOfConfig":"31"},{"size":1358,"mtime":1617690636330,"results":"48","hashOfConfig":"31"},{"size":955,"mtime":1617690636334,"results":"49","hashOfConfig":"31"},{"size":201,"mtime":1617690636328,"results":"50","hashOfConfig":"31"},{"size":277,"mtime":1617690636328,"results":"51","hashOfConfig":"31"},{"size":1213,"mtime":1617690636341,"results":"52","hashOfConfig":"31"},{"size":1931,"mtime":1617690636331,"results":"53","hashOfConfig":"31"},{"size":394,"mtime":1617690636338,"results":"54","hashOfConfig":"31"},{"size":1761,"mtime":1617690636335,"results":"55","hashOfConfig":"31"},{"size":2197,"mtime":1617690636337,"results":"56","hashOfConfig":"31"},{"size":4290,"mtime":1617690636336,"results":"57","hashOfConfig":"31"},{"size":55,"mtime":1617690636287,"results":"58","hashOfConfig":"31"},{"size":311,"mtime":1617704682295,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"jcib30",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"70","usedDeprecatedRules":"67"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"67"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"67"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"67"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"67"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"67"},"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\index.js",[],["126","127"],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\reportWebVitals.js",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\store\\index.ts",[],["128","129"],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\store\\action-creators\\blocks.tsx",["130","131"],"import {BlocksAction} from \"../types/blocks\";\r\nimport {Dispatch} from \"redux\";\r\nimport {BlocksActionTypes} from \"../actions\";\r\nimport {IBlockFactory} from \"../../components/editor/blocks/factory/IBlockFactory\";\r\nimport {CreatorBlock} from \"../../components/editor/blocks/factory/CreatorBlock\";\r\nimport {\r\n    COORDINATE_CHANGE_ERROR,\r\n    DATA_INSERTION_ERROR,\r\n    DATA_LOADING_ERROR,\r\n    ERROR_ADDING_BLOCK\r\n} from \"../../assets/errorMessadges\";\r\nimport {IBlock} from \"../../components/editor/blocks/primitives/IBlock\";\r\nimport {ConnectionManager} from \"../../components/editor/connections/ConnectionManager\";\r\n\r\n//создает блоки разных типов\r\nconst creatorBlocks: IBlockFactory = new CreatorBlock()\r\n//список возможных блоков для построения схемы\r\nconst originalBlocks = creatorBlocks.getOriginBlock()\r\n//добавленные пользователем блоки\r\nconst blocks = new Array<IBlock>()\r\n//связи между блоками\r\nconst connectBlocks = new Array()\r\n\r\n/**\r\n * загрузить список всех оригинальных блоков, расположенных\r\n * на панели компонентов\r\n */\r\nexport const fetchOriginalBlocks = () => {\r\n    return async (dispatch: Dispatch<BlocksAction>) => {\r\n        try {\r\n            dispatch({type: BlocksActionTypes.FETCH_BLOCKS})\r\n            const response = originalBlocks\r\n            dispatch({\r\n                type: BlocksActionTypes.FETCH_BLOCKS_ERROR, payload: null\r\n            })\r\n            dispatch({\r\n                type: BlocksActionTypes.FETCH_ORIGIN_BLOCKS_SUCCESS, payload: response\r\n            })\r\n        } catch (e) {\r\n            dispatch({\r\n                type: BlocksActionTypes.FETCH_BLOCKS_ERROR, payload: DATA_LOADING_ERROR\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * загрузить список всех добавленных на панель редактирования блоков\r\n *\r\n */\r\nexport const fetchBlocks = () => {\r\n    return async (dispatch: Dispatch<BlocksAction>) => {\r\n        try {\r\n            dispatch({type: BlocksActionTypes.FETCH_BLOCKS})\r\n            // const response = originalBlocks\r\n            dispatch({\r\n                type: BlocksActionTypes.FETCH_BLOCKS_ERROR, payload: null\r\n            })\r\n            dispatch({\r\n                type: BlocksActionTypes.FETCH_BLOCKS_SUCCESS, payload: blocks\r\n            })\r\n        } catch (e) {\r\n            dispatch({\r\n                type: BlocksActionTypes.FETCH_BLOCKS_ERROR, payload: DATA_LOADING_ERROR\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * добавление нового блока из панели компонентов\r\n * @param block\r\n */\r\nexport const addBlocks = (block: IBlock) => {\r\n    return (dispatch: Dispatch<BlocksAction>) => {\r\n        try {\r\n            const response = blocks\r\n            response.push(block)\r\n            dispatch({\r\n                type: BlocksActionTypes.FETCH_BLOCKS_ERROR, payload: null\r\n            })\r\n            dispatch({type: BlocksActionTypes.ADD_BLOCK, payload: block})\r\n        } catch (e) {\r\n            dispatch({\r\n                type: BlocksActionTypes.FETCH_BLOCKS_ERROR, payload: ERROR_ADDING_BLOCK\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * изменение координат блока с указанным id\r\n * @param id изменяемого блока\r\n * @param left значение, на которое изменится координата left\r\n * @param top значение, на которое изменится координата top\r\n */\r\nexport const changeBlocks = (id: string, left: number, top: number) => {\r\n    let flag = false\r\n    blocks.forEach(item => {\r\n        if (!item.getId()?.localeCompare(id)) {\r\n            item.setTop(top)\r\n            item.setLeft(left)\r\n            flag = true\r\n        }\r\n    })\r\n    return (dispatch: Dispatch<BlocksAction>) => {\r\n        try {\r\n            if (flag) {\r\n                dispatch({\r\n                    type: BlocksActionTypes.FETCH_BLOCKS_ERROR, payload: null\r\n                })\r\n                dispatch({type: BlocksActionTypes.PUT_DATA, payload: blocks})\r\n            } else {\r\n                dispatch({\r\n                    type: BlocksActionTypes.FETCH_BLOCKS_ERROR,\r\n                    payload: DATA_INSERTION_ERROR + \" \" + COORDINATE_CHANGE_ERROR\r\n                })\r\n            }\r\n        } catch (e) {\r\n            dispatch({\r\n                type: BlocksActionTypes.FETCH_BLOCKS_ERROR,\r\n                payload: DATA_INSERTION_ERROR + \" \" + COORDINATE_CHANGE_ERROR\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Проверить при перемещении блока, не пытается ли пользователь создать связь между блоками.\r\n * Проверка осуществляется сравнением координат - если площади блоков пересекаются - создать связь\r\n * и не перемещать блок\r\n * @param id перемещаемого блока\r\n * @param left - координата перемещаемого блока\r\n * @param top - координата перемещаемого блока\r\n */\r\nexport const checkCoordinatesBlock = (id: string, left: number, top: number) => {\r\n\r\n    blocks.forEach(item => {\r\n        if (item.getId()?.localeCompare(id)) {\r\n            const blockWidth: number = document.getElementById(item.getId()!!)!!.clientWidth\r\n            const blockTop: number = document.getElementById(item.getId()!!)!!.clientHeight\r\n\r\n            if ((left >= item.getLeft() || (left + blockWidth) >= item.getLeft()) &&\r\n                (left  <= item.getLeft() + blockWidth) &&\r\n                (top >= item.getTop() || (top + blockTop) >= item.getTop()) &&\r\n                (top  <= item.getTop() + blockTop)\r\n            ){\r\n                console.log(\"Создать связь\")\r\n                setNeighborsBlocks(id, item.getId()!!)\r\n                return true\r\n            }\r\n\r\n        }\r\n\r\n        return false\r\n    })\r\n\r\n    return false\r\n}\r\n\r\nconst setNeighborsBlocks = (idOne: string, idTwo: string) => {\r\n    let itemOne: IBlock | undefined\r\n    let itemTwo: IBlock | undefined\r\n    blocks.forEach(item => {\r\n        if(item.getId()?.localeCompare(idOne)) itemOne = item\r\n        if(item.getId()?.localeCompare(idTwo)) itemTwo = item\r\n    })\r\n    if(itemOne !== undefined && itemTwo !== undefined){\r\n        //ЗДЕСЬ НУЖНО БУДЕТ УЧЕСТЬ ТИП БЛОКА\r\n        // if(itemOne.getTypeBlock() == \"БЛОК ВХОДА\" && itemTwo.getTypeBlock() == \"БЛОК ВХОДА\") ОШИБКА\r\n        // if(itemOne.getTypeBlock() == \"БЛОК ВХОДА\") СДЕЛАТЬ ЕГО ПЕРВЫМ\r\n        // if(itemTwo.getTypeBlock() == \"БЛОК ВХОДА\") СДЕЛАТЬ ЕГО ПЕРВЫМ\r\n\r\n        setNeighbors(itemOne, itemTwo)\r\n        console.log(\"Соседи предыдущий \" + itemOne.getPreviousNeighbor() + \" последующий \"\r\n        + itemOne.getSubsequentNeighbor())\r\n        paintConnection()\r\n    }\r\n\r\n}\r\n\r\nconst setNeighbors = (itemOne: IBlock, itemTwo: IBlock) => {\r\n    itemOne.setSubsequentNeighbor(itemTwo.getId()!!)\r\n    itemTwo.setPreviousNeighbor(itemOne.getId()!!)\r\n}\r\n\r\nconst paintConnection = () => {\r\n    return <ConnectionManager/>\r\n}\r\n","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\store\\action-creators\\index.ts",["132"],"import * as BlockActionCreator from './blocks'\r\n\r\nexport default {\r\n    ...BlockActionCreator,\r\n}","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\assets\\errorMessadges.tsx",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\store\\reducers\\index.ts",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\store\\reducers\\blockReducer.tsx",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\store\\actions.tsx",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\components\\editor\\EditorApp.tsx",["133","134","135"],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\components\\editor\\panel\\EditPanel.tsx",["136","137","138","139","140","141","142"],"import React, {CSSProperties, FC, useCallback, useEffect, useRef} from \"react\";\r\nimport {useDrop} from \"react-dnd\";\r\nimport {ItemTypes} from \"../dnd/ItemTypes\";\r\nimport {DragItem} from \"../dnd/DragItem\";\r\nimport {snapToGrid as doSnapToGrid} from '../dnd/snapToGrid'\r\nimport {CreatorBlock} from \"../blocks/factory/CreatorBlock\";\r\nimport {IBlockFactory} from \"../blocks/factory/IBlockFactory\";\r\nimport {BlockMap1, RendrerManager} from \"../dnd/RendrerManager\";\r\nimport {blocksTypedSelector} from \"../hooks/blocksTypedSelector\";\r\nimport {useActions} from \"../hooks/blockActions\";\r\nimport {changeBlocks, checkCoordinatesBlock} from \"../../../store/action-creators/blocks\";\r\nimport {ErrorMessage} from \"../error/ErrorMessage\";\r\nimport {ConnectionManager} from \"../connections/ConnectionManager\";\r\n\r\n\r\nconst styles: CSSProperties = {\r\n    margin: 0,\r\n    float: \"right\",\r\n    width: \"79%\",\r\n    height: 400,\r\n    border: '1px solid black',\r\n    backgroundColor: 'aqua'\r\n    // position: 'relative',\r\n}\r\n\r\nconst canvasStyle: CSSProperties = {\r\n    position: 'relative',\r\n}\r\n\r\n\r\nexport interface EditPanelProps {\r\n    snapToGrid: boolean\r\n}\r\n\r\n/**\r\n * изменить координаты left в зависимости от ширины\r\n * панели компонентов (панель с original Blocks)\r\n */\r\nfunction getWidthComponentPanel(): number | null {\r\n    const element = document.getElementById(\"component_panel\")\r\n    if (element != null) {\r\n        return Number(element.offsetWidth)\r\n    } else\r\n        return null\r\n}\r\n\r\n//генерация уникального id\r\nexport function generateId(): string {\r\n    return `f${(~~(Math.random() * 1e8)).toString(16)}`\r\n}\r\n\r\n//приводит получаемые объекты к виду, пригодному для отображения\r\nconst renderManager = new RendrerManager()\r\n//создает новые блоки\r\nconst creator: IBlockFactory = new CreatorBlock()\r\n\r\nexport const EditPanel: FC<EditPanelProps> = ({snapToGrid}, props) => {\r\n    const {originBlocks, blocks, loading, error} = blocksTypedSelector(state => state.blocks)\r\n    let renderBlocks: Array<BlockMap1> = renderManager.convert(blocks)\r\n    const {fetchBlocks, addBlocks, changeBlocks} = useActions()\r\n\r\n    useEffect(() => {\r\n        fetchBlocks()\r\n    }, [])\r\n\r\n\r\n\r\n    /**\r\n     * переместить блок или создать блок\r\n     */\r\n    const moveBlock = useCallback(\r\n        (id: string, left: number, top: number) => {\r\n            //проверка - блок добавляется с панели перечисления\r\n            // возможных компонентов (Component Panel) или\r\n            //пепетаскивается существующий на панели редактирования блок\r\n            if (originBlocks[Number(id)] !== undefined) {\r\n                //создаем новый id для добавляемого блока\r\n                let idNew: string = generateId()\r\n                addBlocks(creator.createBlock(\r\n                    originBlocks[Number(id)].getTypeBlock(),\r\n                    left - getWidthComponentPanel()!!,\r\n                    top,\r\n                    idNew\r\n                )!!)\r\n            } else {\r\n\r\n                if (!checkCoordinatesBlock(id, left, top))\r\n                    //перетаскиваем блок\r\n                    changeBlocks(id, left, top)\r\n\r\n            }\r\n        },\r\n        [blocks],\r\n    )\r\n\r\n\r\n    /**\r\n     * реакция на dnd\r\n     */\r\n    const [, drop] = useDrop({\r\n        accept: ItemTypes.BLOCK,\r\n        drop(item: DragItem, monitor) {\r\n            const delta = monitor.getDifferenceFromInitialOffset() as {\r\n                x: number\r\n                y: number\r\n            }\r\n\r\n\r\n            let left = Math.round(item.left + delta.x)\r\n            let top = Math.round(item.top + delta.y)\r\n\r\n            if (snapToGrid) {\r\n                ;[left, top] = doSnapToGrid(left, top)\r\n            }\r\n\r\n            moveBlock(item.id, left, top)\r\n            return undefined\r\n        },\r\n    })\r\n\r\n\r\n    if (loading) {\r\n        return <h1>Идет загрузка...</h1>\r\n    }\r\n\r\n    // if(error){\r\n    //     return <ErrorMessage message={error}/>\r\n    // }\r\n\r\n    return (\r\n        <div>\r\n            <div ref={drop} style={styles}>\r\n                {Object.keys(renderBlocks).map((id) =>\r\n                    renderManager.renders(renderBlocks[Number(id)], id))}\r\n                <ConnectionManager/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\components\\editor\\panel\\ComponentPanel.tsx",["143","144","145","146","147","148","149","150"],"import {CSSProperties, useEffect} from \"react\";\r\nimport {IBlockFactory} from \"../blocks/factory/IBlockFactory\";\r\nimport {CreatorBlock} from \"../blocks/factory/CreatorBlock\";\r\nimport {BlockMap1, RendrerManager} from \"../dnd/RendrerManager\";\r\nimport {blockReducer} from \"../../../store/reducers/blockReducer\";\r\nimport {blocksTypedSelector} from \"../hooks/blocksTypedSelector\";\r\nimport {useActions} from \"../hooks/blockActions\";\r\nimport {fetchBlocks, fetchOriginalBlocks} from \"../../../store/action-creators/blocks\";\r\nimport {ErrorMessage} from \"../error/ErrorMessage\";\r\n\r\nconst styles: CSSProperties = {\r\n    margin: 0,\r\n    float: \"left\",\r\n    height: 400,\r\n    width: \"20%\",\r\n    backgroundColor: 'darkgray',\r\n    display: \"flex\"\r\n}\r\n\r\nconst renderManager = new RendrerManager()\r\n\r\nexport const ComponentPanel = () => {\r\n    const {originBlocks, loading, error} = blocksTypedSelector(state => state.blocks)\r\n    let fd: Array<BlockMap1> = renderManager.convert(originBlocks)\r\n    const {fetchOriginalBlocks} = useActions()\r\n\r\n    useEffect(() => {\r\n        fetchOriginalBlocks()\r\n    }, [])\r\n\r\n    if(loading){\r\n        return <h1>Идет загрузка...</h1>\r\n    }\r\n\r\n    // if(error){\r\n    //     return <ErrorMessage message={error}/>\r\n    // }\r\n\r\n    return (\r\n        <div id={\"component_panel\"} style={styles}>\r\n            {Object.keys(fd).map((id) => renderManager.renders(fd[Number(id)], id))}\r\n        </div>\r\n\r\n    )\r\n}\r\n","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\components\\editor\\error\\ErrorMessage.tsx",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\components\\editor\\dnd\\CustomDragLayer.tsx",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\components\\editor\\connections\\ConnectionManager.tsx",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\components\\editor\\dnd\\ItemTypes.ts",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\components\\editor\\dnd\\snapToGrid.ts",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\components\\editor\\dnd\\RendrerManager.tsx",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\components\\editor\\dnd\\BlockDragPreview.tsx",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\components\\editor\\hooks\\blocksTypedSelector.tsx",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\components\\editor\\hooks\\blockActions.tsx",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\components\\editor\\blocks\\factory\\CreatorBlock.tsx",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\components\\editor\\dnd\\DraggableBlock.tsx",["151"],"import {CSSProperties, FC, useEffect} from \"react\";\r\nimport {DragSourceMonitor, useDrag} from \"react-dnd\";\r\nimport {ItemTypes} from \"./ItemTypes\";\r\nimport {getEmptyImage} from \"react-dnd-html5-backend\";\r\nimport {IBlockFactory} from \"../blocks/factory/IBlockFactory\";\r\nimport {CreatorBlock} from \"../blocks/factory/CreatorBlock\";\r\nimport {IBlock} from \"../blocks/primitives/IBlock\";\r\n\r\nfunction getStyles(\r\n    left: number,\r\n    top: number,\r\n    isDragging: boolean\r\n): CSSProperties {\r\n    const transform = `translate3d(${left}px, ${top}px, 0)`\r\n    return {\r\n        position: 'absolute',\r\n        transform,\r\n        WebkitTransform: transform,\r\n        // IE fallback: hide the real node using CSS when dragging\r\n        // because IE will ignore our custom \"empty image\" drag preview.\r\n        opacity: isDragging ? 0 : 1,\r\n        height: isDragging ? 0 : '',\r\n    }\r\n}\r\n\r\nexport interface DraggableBlockProps {\r\n    id: string\r\n    title: string\r\n    left: number\r\n    top: number\r\n    typeBlock: string\r\n}\r\n\r\nfunction selectTypeBlock(\r\n    typeBlock: string, title: string, left: number, top: number, id: string\r\n): IBlock | undefined {\r\n    const blockFactory: IBlockFactory = new CreatorBlock()\r\n    return blockFactory.createBlock(typeBlock, left, top, id)\r\n}\r\n\r\nexport const DraggableBlock: FC<DraggableBlockProps> = (props) => {\r\n    const {left, top, title, typeBlock, id} = props\r\n\r\n    const [{isDragging}, drag, preview] = useDrag({\r\n        item: {type: ItemTypes.BLOCK, left, top, title, typeBlock, id},\r\n        collect: (monitor: DragSourceMonitor) => ({\r\n            isDragging: monitor.isDragging(),\r\n        }),\r\n    })\r\n\r\n    useEffect(() => {\r\n        preview(getEmptyImage(), {captureDraggingState: true})\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div ref={drag} style={getStyles(left, top, isDragging)}>\r\n            {selectTypeBlock(typeBlock, title, left, top, id)?.render()}\r\n        </div>\r\n    )\r\n}","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\components\\editor\\blocks\\primitives\\BlockTypes.ts",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\components\\editor\\blocks\\primitives\\SubroutineBlockEx.tsx",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\components\\editor\\blocks\\primitives\\ConditionBlock.tsx",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\components\\editor\\blocks\\primitives\\ParentBlock.tsx",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\store\\action-creators\\clickOnBlocks.ts",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\components\\editor\\connections\\ConnectionBlocks.tsx",["152","153","154","155","156","157"],"import {FC, useEffect, useRef} from \"react\";\r\n\r\ninterface ConnectionBlockProps {\r\n    x: number,\r\n    y: number,\r\n    context: any\r\n}\r\n\r\nexport const ConnectionBlocks: FC<ConnectionBlockProps> = (props) => {\r\n\r\n\r\n    return(\r\n        <div>\r\n            <h3>fffffffffff</h3>\r\n\r\n        </div>\r\n\r\n    )\r\n}",{"ruleId":"158","replacedBy":"159"},{"ruleId":"160","replacedBy":"161"},{"ruleId":"158","replacedBy":"159"},{"ruleId":"160","replacedBy":"161"},{"ruleId":"162","severity":1,"message":"163","line":22,"column":7,"nodeType":"164","messageId":"165","endLine":22,"endColumn":20},{"ruleId":"166","severity":1,"message":"167","line":22,"column":23,"nodeType":"168","messageId":"169","endLine":22,"endColumn":34,"fix":"170"},{"ruleId":"171","severity":1,"message":"172","line":3,"column":1,"nodeType":"173","endLine":5,"endColumn":2},{"ruleId":"162","severity":1,"message":"174","line":11,"column":9,"nodeType":"164","messageId":"165","endLine":11,"endColumn":26},{"ruleId":"162","severity":1,"message":"175","line":18,"column":11,"nodeType":"164","messageId":"165","endLine":18,"endColumn":42},{"ruleId":"162","severity":1,"message":"176","line":22,"column":11,"nodeType":"164","messageId":"165","endLine":22,"endColumn":46},{"ruleId":"162","severity":1,"message":"177","line":1,"column":59,"nodeType":"164","messageId":"165","endLine":1,"endColumn":65},{"ruleId":"162","severity":1,"message":"178","line":11,"column":9,"nodeType":"164","messageId":"165","endLine":11,"endColumn":21},{"ruleId":"162","severity":1,"message":"179","line":12,"column":9,"nodeType":"164","messageId":"165","endLine":12,"endColumn":21},{"ruleId":"162","severity":1,"message":"180","line":26,"column":7,"nodeType":"164","messageId":"165","endLine":26,"endColumn":33},{"ruleId":"162","severity":1,"message":"181","line":58,"column":43,"nodeType":"164","messageId":"165","endLine":58,"endColumn":48},{"ruleId":"182","severity":1,"message":"183","line":64,"column":8,"nodeType":"184","endLine":64,"endColumn":10,"suggestions":"185"},{"ruleId":"182","severity":1,"message":"186","line":93,"column":9,"nodeType":"184","endLine":93,"endColumn":17,"suggestions":"187"},{"ruleId":"162","severity":1,"message":"188","line":2,"column":9,"nodeType":"164","messageId":"165","endLine":2,"endColumn":22},{"ruleId":"162","severity":1,"message":"189","line":3,"column":9,"nodeType":"164","messageId":"165","endLine":3,"endColumn":21},{"ruleId":"162","severity":1,"message":"190","line":5,"column":9,"nodeType":"164","messageId":"165","endLine":5,"endColumn":21},{"ruleId":"162","severity":1,"message":"191","line":8,"column":9,"nodeType":"164","messageId":"165","endLine":8,"endColumn":20},{"ruleId":"162","severity":1,"message":"192","line":8,"column":22,"nodeType":"164","messageId":"165","endLine":8,"endColumn":41},{"ruleId":"162","severity":1,"message":"179","line":9,"column":9,"nodeType":"164","messageId":"165","endLine":9,"endColumn":21},{"ruleId":"162","severity":1,"message":"181","line":23,"column":35,"nodeType":"164","messageId":"165","endLine":23,"endColumn":40},{"ruleId":"182","severity":1,"message":"193","line":29,"column":8,"nodeType":"184","endLine":29,"endColumn":10,"suggestions":"194"},{"ruleId":"182","severity":1,"message":"195","line":53,"column":8,"nodeType":"184","endLine":53,"endColumn":10,"suggestions":"196"},{"ruleId":"162","severity":1,"message":"197","line":1,"column":9,"nodeType":"164","messageId":"165","endLine":1,"endColumn":11},{"ruleId":"162","severity":1,"message":"198","line":1,"column":13,"nodeType":"164","messageId":"165","endLine":1,"endColumn":22},{"ruleId":"162","severity":1,"message":"177","line":1,"column":24,"nodeType":"164","messageId":"165","endLine":1,"endColumn":30},{"ruleId":"162","severity":1,"message":"199","line":10,"column":12,"nodeType":"164","messageId":"165","endLine":10,"endColumn":13},{"ruleId":"162","severity":1,"message":"200","line":10,"column":15,"nodeType":"164","messageId":"165","endLine":10,"endColumn":16},{"ruleId":"162","severity":1,"message":"201","line":10,"column":18,"nodeType":"164","messageId":"165","endLine":10,"endColumn":25},"no-native-reassign",["202"],"no-negated-in-lhs",["203"],"@typescript-eslint/no-unused-vars","'connectBlocks' is assigned a value but never used.","Identifier","unusedVar","@typescript-eslint/no-array-constructor","The array literal notation [] is preferable.","NewExpression","useLiteral",{"range":"204","text":"205"},"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'ConnectionManager' is defined but never used.","'handleSnapToGridAfterDropChange' is assigned a value but never used.","'handleSnapToGridWhileDraggingChange' is assigned a value but never used.","'useRef' is defined but never used.","'changeBlocks' is defined but never used.","'ErrorMessage' is defined but never used.","'canvasStyle' is assigned a value but never used.","'error' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchBlocks'. Either include it or remove the dependency array.","ArrayExpression",["206"],"React Hook useCallback has missing dependencies: 'addBlocks', 'changeBlocks', and 'originBlocks'. Either include them or remove the dependency array.",["207"],"'IBlockFactory' is defined but never used.","'CreatorBlock' is defined but never used.","'blockReducer' is defined but never used.","'fetchBlocks' is defined but never used.","'fetchOriginalBlocks' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchOriginalBlocks'. Either include it or remove the dependency array.",["208"],"React Hook useEffect has a missing dependency: 'preview'. Either include it or remove the dependency array.",["209"],"'FC' is defined but never used.","'useEffect' is defined but never used.","'x' is assigned a value but never used.","'y' is assigned a value but never used.","'context' is assigned a value but never used.","no-global-assign","no-unsafe-negation",[922,933],"[]",{"desc":"210","fix":"211"},{"desc":"212","fix":"213"},{"desc":"214","fix":"215"},{"desc":"216","fix":"217"},"Update the dependencies array to be: [fetchBlocks]",{"range":"218","text":"219"},"Update the dependencies array to be: [addBlocks, changeBlocks, originBlocks]",{"range":"220","text":"221"},"Update the dependencies array to be: [fetchOriginalBlocks]",{"range":"222","text":"223"},"Update the dependencies array to be: [preview]",{"range":"224","text":"225"},[2150,2152],"[fetchBlocks]",[3131,3139],"[addBlocks, changeBlocks, originBlocks]",[1088,1090],"[fetchOriginalBlocks]",[1743,1745],"[preview]"]