[{"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\reportWebVitals.js":"1","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\App.js":"2","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\index.js":"3","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\EditorApp.tsx":"4","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\snapToGrid.ts":"5","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\ItemTypes.ts":"6","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\BlockDragPreview.tsx":"7","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\DraggableBlock.tsx":"8","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\Block.tsx":"9","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\panel\\CustomDragLayer.tsx":"10","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\panel\\EditPanel.tsx":"11","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\panel\\ComponentPanel.tsx":"12"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"14"},{"size":206,"mtime":1613107428062,"results":"15","hashOfConfig":"14"},{"size":334,"mtime":1613118174936,"results":"16","hashOfConfig":"14"},{"size":1263,"mtime":1613118580118,"results":"17","hashOfConfig":"14"},{"size":196,"mtime":1613114087351,"results":"18","hashOfConfig":"14"},{"size":50,"mtime":1613113068218,"results":"19","hashOfConfig":"14"},{"size":861,"mtime":1613112505911,"results":"20","hashOfConfig":"14"},{"size":1457,"mtime":1613118174949,"results":"21","hashOfConfig":"14"},{"size":420,"mtime":1613108921569,"results":"22","hashOfConfig":"14"},{"size":2096,"mtime":1613118239899,"results":"23","hashOfConfig":"14"},{"size":2075,"mtime":1613118239929,"results":"24","hashOfConfig":"14"},{"size":310,"mtime":1613118459500,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"jcib30",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"37"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"37"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\reportWebVitals.js",[],["54","55"],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\App.js",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\index.js",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\EditorApp.tsx",["56","57","58"],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\snapToGrid.ts",[],["59","60"],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\ItemTypes.ts",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\BlockDragPreview.tsx",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\DraggableBlock.tsx",["61","62"],"import {CSSProperties, FC, useEffect} from \"react\";\r\nimport {DragSourceMonitor, useDrag, useDrop} from \"react-dnd\";\r\nimport {ItemTypes} from \"../ItemTypes\";\r\nimport {getEmptyImage} from \"react-dnd-html5-backend\";\r\nimport {Block} from \"./Block\";\r\n\r\n\r\nfunction getStyles(\r\n    left: number,\r\n    top: number,\r\n    isDragging: boolean\r\n): CSSProperties {\r\n    const transform = `translate3d(${left}px, ${top}px, 0)`\r\n    return {\r\n        position: 'absolute',\r\n        transform,\r\n        WebkitTransform: transform,\r\n        // IE fallback: hide the real node using CSS when dragging\r\n        // because IE will ignore our custom \"empty image\" drag preview.\r\n        opacity: isDragging ? 0 : 1,\r\n        height: isDragging ? 0 : '',\r\n    }\r\n}\r\n\r\nexport interface DraggableBlockProps{\r\n    id: string\r\n    title: string\r\n    left: number\r\n    top: number\r\n}\r\n\r\nexport const DraggableBlock: FC<DraggableBlockProps> = (props) => {\r\n    const { id, title, left, top } = props\r\n    const [{ isDragging }, drag, preview] = useDrag({\r\n        item: { type: ItemTypes.BLOCK, id, left, top, title },\r\n        collect: (monitor: DragSourceMonitor) => ({\r\n            isDragging: monitor.isDragging(),\r\n        }),\r\n    })\r\n\r\n    useEffect(() => {\r\n        preview(getEmptyImage(), {captureDraggingState: true})\r\n    }, [])\r\n\r\n    return(\r\n        <div ref={drag} style={getStyles(left, top, isDragging)}>\r\n            <Block title={title} />\r\n        </div>\r\n    )\r\n}","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\Block.tsx",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\panel\\CustomDragLayer.tsx",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\panel\\EditPanel.tsx",["63"],"import {CSSProperties, FC, useCallback, useState} from \"react\";\r\nimport {DraggableBlock} from \"../blocks/DraggableBlock\";\r\nimport {ContainerProps} from \"react-bootstrap\";\r\nimport {useDrop} from \"react-dnd\";\r\nimport {ItemTypes} from \"../ItemTypes\";\r\nimport {DragItem} from \"../DragItem\";\r\nimport {snapToGrid as doSnapToGrid} from '../snapToGrid'\r\nimport update from 'immutability-helper';\r\n\r\nconst styles: CSSProperties = {\r\n    width: 300,\r\n    height: 300,\r\n    border: '1px solid black',\r\n    position: 'relative',\r\n}\r\n\r\nexport interface EditPanelProps {\r\n    snapToGrid: boolean\r\n}\r\n\r\ninterface BlockMap {\r\n    [key: string]: { top: number; left: number; title: string }\r\n}\r\n\r\nfunction renderBlock(item: any, key: any) {\r\n    return <DraggableBlock key={key} id={key} {...item} />\r\n}\r\n\r\nexport const EditPanel: FC<EditPanelProps> = ({snapToGrid}) => {\r\n    const [blocks, setBlocks] = useState<BlockMap>({\r\n        a: {top: 20, left: 80, title: 'Drag me around'},\r\n        b: {top: 180, left: 20, title: 'Drag me too'},\r\n    })\r\n\r\n    const moveBlock = useCallback(\r\n        (id: string, left: number, top: number) => {\r\n            setBlocks(\r\n                update(blocks, {\r\n                    [id]: {\r\n                        $merge: {left, top},\r\n                    },\r\n                }),\r\n            )\r\n        },\r\n        [blocks],\r\n    )\r\n\r\n    const [, drop] = useDrop({\r\n        accept: ItemTypes.BLOCK,\r\n        drop(item: DragItem, monitor) {\r\n            const delta = monitor.getDifferenceFromInitialOffset() as {\r\n                x: number\r\n                y: number\r\n            }\r\n\r\n            let left = Math.round(item.left + delta.x)\r\n            let top = Math.round(item.top + delta.y)\r\n            if (snapToGrid) {\r\n                ;[left, top] = doSnapToGrid(left, top)\r\n            }\r\n\r\n            moveBlock(item.id, left, top)\r\n            return undefined\r\n        },\r\n    })\r\n\r\n    return (\r\n        <div ref={drop} style={styles}>\r\n            {Object.keys(blocks).map((key) => renderBlock(blocks[key], key))}\r\n        </div>\r\n    )\r\n}","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\panel\\ComponentPanel.tsx",[],{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":7,"column":9,"nodeType":"70","messageId":"71","endLine":7,"endColumn":18},{"ruleId":"68","severity":1,"message":"72","line":13,"column":11,"nodeType":"70","messageId":"71","endLine":13,"endColumn":42},{"ruleId":"68","severity":1,"message":"73","line":17,"column":11,"nodeType":"70","messageId":"71","endLine":17,"endColumn":46},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"74","line":2,"column":37,"nodeType":"70","messageId":"71","endLine":2,"endColumn":44},{"ruleId":"75","severity":1,"message":"76","line":43,"column":8,"nodeType":"77","endLine":43,"endColumn":10,"suggestions":"78"},{"ruleId":"68","severity":1,"message":"79","line":3,"column":9,"nodeType":"70","messageId":"71","endLine":3,"endColumn":23},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"@typescript-eslint/no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","'handleSnapToGridAfterDropChange' is assigned a value but never used.","'handleSnapToGridWhileDraggingChange' is assigned a value but never used.","'useDrop' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'preview'. Either include it or remove the dependency array.","ArrayExpression",["82"],"'ContainerProps' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"83","fix":"84"},"Update the dependencies array to be: [preview]",{"range":"85","text":"86"},[1309,1311],"[preview]"]