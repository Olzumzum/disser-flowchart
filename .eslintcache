[{"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\index.js":"1","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\reportWebVitals.js":"2","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\EditorApp.tsx":"3","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\panel\\CustomDragLayer.tsx":"4","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\panel\\EditPanel.tsx":"5","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\panel\\ComponentPanel.tsx":"6","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\snapToGrid.ts":"7","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\ItemTypes.ts":"8","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\BlockDragPreview.tsx":"9","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\DraggableBlock.tsx":"10","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\Block.tsx":"11"},{"size":376,"mtime":1613302676500,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"13"},{"size":1415,"mtime":1613302676487,"results":"15","hashOfConfig":"13"},{"size":2096,"mtime":1613302676495,"results":"16","hashOfConfig":"13"},{"size":3617,"mtime":1613715276986,"results":"17","hashOfConfig":"13"},{"size":980,"mtime":1613715276985,"results":"18","hashOfConfig":"13"},{"size":196,"mtime":1613302676499,"results":"19","hashOfConfig":"13"},{"size":50,"mtime":1613302676535,"results":"20","hashOfConfig":"13"},{"size":861,"mtime":1613302676491,"results":"21","hashOfConfig":"13"},{"size":1457,"mtime":1613715276984,"results":"22","hashOfConfig":"13"},{"size":420,"mtime":1613715276983,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"jcib30",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\index.js",[],["51","52"],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\reportWebVitals.js",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\EditorApp.tsx",["53","54"],"import {FC, useCallback, useState} from \"react\";\r\nimport {CustomDragLayer} from \"./panel/CustomDragLayer\";\r\nimport {EditPanel} from \"./panel/EditPanel\"\r\nimport {DndProvider} from \"react-dnd\";\r\nimport {HTML5Backend} from \"react-dnd-html5-backend\";\r\nimport {ComponentPanel} from \"./panel/ComponentPanel\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\n\r\nexport const EditorApp: FC = () => {\r\n    const [snapToGridAfterDrop, setSnapToGridAfterDrop] = useState(false)\r\n    const [snapToGridWhileDragging, setSnapToGridWhileDragging] = useState(false)\r\n\r\n    const handleSnapToGridAfterDropChange = useCallback(() => {\r\n        setSnapToGridAfterDrop(!snapToGridAfterDrop)\r\n    }, [snapToGridAfterDrop])\r\n\r\n    const handleSnapToGridWhileDraggingChange = useCallback(() => {\r\n        setSnapToGridWhileDragging(!snapToGridWhileDragging)\r\n    }, [snapToGridWhileDragging])\r\n\r\n    return (\r\n        <DndProvider backend={HTML5Backend}>\r\n            <Container fluid>\r\n                {/* <Row>*/}\r\n                {/*     <Toolbar/>*/}\r\n                {/*</Row>*/}\r\n                <Row style={{\r\n                    height: 300\r\n                }}>\r\n                    <ComponentPanel/>\r\n                    <EditPanel snapToGrid={snapToGridAfterDrop}/>\r\n                    <CustomDragLayer snapToGrid={snapToGridWhileDragging}/>\r\n                </Row>\r\n            </Container>\r\n        </DndProvider>\r\n    )\r\n\r\n}",["55","56"],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\panel\\CustomDragLayer.tsx",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\panel\\EditPanel.tsx",["57"],"import {CSSProperties, FC, useCallback, useState} from \"react\";\r\nimport {DraggableBlock} from \"../blocks/DraggableBlock\";\r\nimport {useDrop} from \"react-dnd\";\r\nimport {ItemTypes} from \"../ItemTypes\";\r\nimport {DragItem} from \"../DragItem\";\r\nimport {snapToGrid as doSnapToGrid} from '../snapToGrid'\r\nimport {originalBlocks} from \"./ComponentPanel\";\r\nimport update from \"immutability-helper\";\r\n\r\n\r\nconst styles: CSSProperties = {\r\n    margin: 0,\r\n    float: \"right\",\r\n    width: \"79%\",\r\n    height: 400,\r\n    border: '1px solid black',\r\n    backgroundColor: 'aqua'\r\n    // position: 'relative',\r\n}\r\n\r\nexport interface EditPanelProps {\r\n    snapToGrid: boolean\r\n}\r\n\r\n//интерфейс имеющихся для отображения блоков\r\nexport interface BlockMap {\r\n    [key: string]: { top: number; left: number; title: string, typeBlock: string }\r\n}\r\n\r\n//отображает перетаскиваемые блоки\r\nexport function renderBlock(item: any, key: any) {\r\n    return <DraggableBlock key={key} id={key} {...item} />\r\n}\r\n\r\nfunction getWidthComponentPanel(): number | null {\r\n    const element = document.getElementById(\"component_panel\")\r\n\r\n    if (element != null) {\r\n        return Number(element.offsetWidth)\r\n    } else\r\n        return null\r\n}\r\n\r\n//генерация уникального id\r\nfunction generateId(): string {\r\n    return `f${(~~(Math.random() * 1e8)).toString(16)}`\r\n}\r\n\r\n\r\nexport const EditPanel: FC<EditPanelProps> = ({snapToGrid}) => {\r\n    const [blocks, setBlocks] = useState<BlockMap>({})\r\n\r\n    const moveBlock = useCallback(\r\n        (id: string, left: number, top: number) => {\r\n            let flag = false\r\n            //проверка - блок добавляется с панели перечисления\r\n            // возможных компонентов (Component Panel) или нет\r\n            Object.keys(originalBlocks).map((key) => {\r\n                    if (!key.localeCompare(id)) {\r\n                        flag = true\r\n                    }\r\n                }\r\n            )\r\n            if (flag) {\r\n                //создаем новый id для добавляемого блока\r\n                let idNew: string = generateId()\r\n                setBlocks(\r\n                    prevState => ({\r\n                        ...prevState,\r\n                        [idNew]: {top: top,\r\n                            left: left - getWidthComponentPanel()!!,\r\n                            title: originalBlocks[id].title,\r\n                            typeBlock: originalBlocks[id].typeBlock\r\n\r\n                        }\r\n                    })\r\n                )\r\n            } else {\r\n                setBlocks(\r\n                    update(blocks, {\r\n                        [id]: {\r\n                            $merge: {left, top},\r\n                        },\r\n                    }),\r\n                )\r\n            }\r\n        },\r\n        [blocks],\r\n    )\r\n\r\n    const [, drop] = useDrop({\r\n        accept: ItemTypes.BLOCK,\r\n        drop(item: DragItem, monitor) {\r\n            const delta = monitor.getDifferenceFromInitialOffset() as {\r\n                x: number\r\n                y: number\r\n            }\r\n\r\n            let left = Math.round(item.left + delta.x)\r\n            let top = Math.round(item.top + delta.y)\r\n\r\n            if (snapToGrid) {\r\n                ;[left, top] = doSnapToGrid(left, top)\r\n            }\r\n\r\n            moveBlock(item.id, left, top)\r\n            return undefined\r\n        },\r\n    })\r\n\r\n    for (var d in blocks) {\r\n        console.log(\"value \" + d + \" \")\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n            <div ref={drop} style={styles}>\r\n                {Object.keys(blocks).map((key) => renderBlock(blocks[key], key))}\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\panel\\ComponentPanel.tsx",["58","59","60","61","62","63","64","65","66","67"],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\snapToGrid.ts",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\ItemTypes.ts",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\BlockDragPreview.tsx",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\DraggableBlock.tsx",["68","69"],"import {CSSProperties, FC, useEffect} from \"react\";\r\nimport {DragSourceMonitor, useDrag, useDrop} from \"react-dnd\";\r\nimport {ItemTypes} from \"../ItemTypes\";\r\nimport {getEmptyImage} from \"react-dnd-html5-backend\";\r\nimport {Block} from \"./Block\";\r\nimport {ConditionBlock} from \"./ConditionBlock\";\r\nimport {BlockTypes} from \"./BlockTypes\";\r\n\r\nfunction getStyles(\r\n    left: number,\r\n    top: number,\r\n    isDragging: boolean\r\n): CSSProperties {\r\n    const transform = `translate3d(${left}px, ${top}px, 0)`\r\n    return {\r\n        position: 'absolute',\r\n        transform,\r\n        WebkitTransform: transform,\r\n        // IE fallback: hide the real node using CSS when dragging\r\n        // because IE will ignore our custom \"empty image\" drag preview.\r\n        opacity: isDragging ? 0 : 1,\r\n        height: isDragging ? 0 : '',\r\n    }\r\n}\r\n\r\nexport interface DraggableBlockProps{\r\n    id: string\r\n    title: string\r\n    left: number\r\n    top: number\r\n    typeBlock: string\r\n}\r\n\r\nfunction selectTypeBlock(typeBlock: string, title: string){\r\n    console.log(\"type block \" + typeBlock)\r\n    switch (typeBlock){\r\n        case BlockTypes.CONDITION: return <ConditionBlock title={title}/>\r\n        case BlockTypes.BLOCK: return <Block title={title}/>\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const DraggableBlock: FC<DraggableBlockProps> = (props) => {\r\n    const { id, title, left, top, typeBlock } = props\r\n    const [{ isDragging }, drag, preview] = useDrag({\r\n        item: { type: ItemTypes.BLOCK, id, left, top, title, typeBlock},\r\n        collect: (monitor: DragSourceMonitor) => ({\r\n            isDragging: monitor.isDragging(),\r\n        }),\r\n    })\r\n\r\n\r\n    useEffect(() => {\r\n        preview(getEmptyImage(), {captureDraggingState: true})\r\n    }, [])\r\n\r\n    return(\r\n        <div ref={drag} style={getStyles(left, top, isDragging)}>\r\n            {selectTypeBlock(typeBlock, title)}\r\n        </div>\r\n    )\r\n}","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\Block.tsx",[],{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":13,"column":11,"nodeType":"76","messageId":"77","endLine":13,"endColumn":42},{"ruleId":"74","severity":1,"message":"78","line":17,"column":11,"nodeType":"76","messageId":"77","endLine":17,"endColumn":46},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"79","severity":1,"message":"80","line":58,"column":51,"nodeType":"81","messageId":"82","endLine":58,"endColumn":53},{"ruleId":"74","severity":1,"message":"83","line":1,"column":9,"nodeType":"76","messageId":"77","endLine":1,"endColumn":12},{"ruleId":"74","severity":1,"message":"84","line":2,"column":9,"nodeType":"76","messageId":"77","endLine":2,"endColumn":23},{"ruleId":"74","severity":1,"message":"85","line":3,"column":24,"nodeType":"76","messageId":"77","endLine":3,"endColumn":35},{"ruleId":"74","severity":1,"message":"86","line":3,"column":37,"nodeType":"76","messageId":"77","endLine":3,"endColumn":45},{"ruleId":"74","severity":1,"message":"87","line":4,"column":9,"nodeType":"76","messageId":"77","endLine":4,"endColumn":17},{"ruleId":"74","severity":1,"message":"88","line":5,"column":9,"nodeType":"76","messageId":"77","endLine":5,"endColumn":16},{"ruleId":"74","severity":1,"message":"89","line":6,"column":9,"nodeType":"76","messageId":"77","endLine":6,"endColumn":18},{"ruleId":"74","severity":1,"message":"90","line":7,"column":9,"nodeType":"76","messageId":"77","endLine":7,"endColumn":17},{"ruleId":"74","severity":1,"message":"91","line":8,"column":23,"nodeType":"76","messageId":"77","endLine":8,"endColumn":35},{"ruleId":"74","severity":1,"message":"92","line":9,"column":8,"nodeType":"76","messageId":"77","endLine":9,"endColumn":14},{"ruleId":"74","severity":1,"message":"88","line":2,"column":37,"nodeType":"76","messageId":"77","endLine":2,"endColumn":44},{"ruleId":"93","severity":1,"message":"94","line":56,"column":8,"nodeType":"95","endLine":56,"endColumn":10,"suggestions":"96"},"no-native-reassign",["97"],"no-negated-in-lhs",["98"],"@typescript-eslint/no-unused-vars","'handleSnapToGridAfterDropChange' is assigned a value but never used.","Identifier","unusedVar","'handleSnapToGridWhileDraggingChange' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Col' is defined but never used.","'DraggableBlock' is defined but never used.","'useCallback' is defined but never used.","'useState' is defined but never used.","'BlockMap' is defined but never used.","'useDrop' is defined but never used.","'ItemTypes' is defined but never used.","'DragItem' is defined but never used.","'doSnapToGrid' is defined but never used.","'update' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'preview'. Either include it or remove the dependency array.","ArrayExpression",["99"],"no-global-assign","no-unsafe-negation",{"desc":"100","fix":"101"},"Update the dependencies array to be: [preview]",{"range":"102","text":"103"},[1686,1688],"[preview]"]