[{"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\index.js":"1","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\reportWebVitals.js":"2","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\EditorApp.tsx":"3","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\panel\\EditPanel.tsx":"4","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\panel\\ComponentPanel.tsx":"5","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\ItemTypes.ts":"6","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\primitives\\SubroutineBlockEx.tsx":"7","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\primitives\\BlockTypes.ts":"8","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\primitives\\ParentBlock.tsx":"9","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\primitives\\ConditionBlock.tsx":"10","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\factory\\originBlocks.tsx":"11","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\dnd\\CustomDragLayer.tsx":"12","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\dnd\\BlockDragPreview.tsx":"13","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\dnd\\DraggableBlock.tsx":"14","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\dnd\\snapToGrid.ts":"15","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\dnd\\RendrerManager.tsx":"16","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\primitives\\IBlock.tsx":"17","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\factory\\CreatorBlock.tsx":"18"},{"size":376,"mtime":1613302676500,"results":"19","hashOfConfig":"20"},{"size":362,"mtime":499162500000,"results":"21","hashOfConfig":"20"},{"size":1413,"mtime":1614687780697,"results":"22","hashOfConfig":"20"},{"size":4691,"mtime":1615808768208,"results":"23","hashOfConfig":"20"},{"size":996,"mtime":1615881687585,"results":"24","hashOfConfig":"20"},{"size":50,"mtime":1613302676535,"results":"25","hashOfConfig":"20"},{"size":1562,"mtime":1615808591591,"results":"26","hashOfConfig":"20"},{"size":394,"mtime":1613818181909,"results":"27","hashOfConfig":"20"},{"size":3314,"mtime":1615805451291,"results":"28","hashOfConfig":"20"},{"size":1931,"mtime":1615881969254,"results":"29","hashOfConfig":"20"},{"size":326,"mtime":1614689031775,"results":"30","hashOfConfig":"20"},{"size":2114,"mtime":1615709573144,"results":"31","hashOfConfig":"20"},{"size":955,"mtime":1614691532612,"results":"32","hashOfConfig":"20"},{"size":1923,"mtime":1615881835191,"results":"33","hashOfConfig":"20"},{"size":196,"mtime":1613302676499,"results":"34","hashOfConfig":"20"},{"size":1409,"mtime":1615880391602,"results":"35","hashOfConfig":"20"},{"size":430,"mtime":1615804490244,"results":"36","hashOfConfig":"20"},{"size":1153,"mtime":1615881918306,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"jcib30",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"46"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\index.js",[],["80","81"],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\reportWebVitals.js",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\EditorApp.tsx",["82","83"],"import {FC, useCallback, useState} from \"react\";\r\nimport {CustomDragLayer} from \"./dnd/CustomDragLayer\";\r\nimport {EditPanel} from \"./panel/EditPanel\"\r\nimport {DndProvider} from \"react-dnd\";\r\nimport {HTML5Backend} from \"react-dnd-html5-backend\";\r\nimport {ComponentPanel} from \"./panel/ComponentPanel\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\n\r\nexport const EditorApp: FC = () => {\r\n    const [snapToGridAfterDrop, setSnapToGridAfterDrop] = useState(false)\r\n    const [snapToGridWhileDragging, setSnapToGridWhileDragging] = useState(false)\r\n\r\n    const handleSnapToGridAfterDropChange = useCallback(() => {\r\n        setSnapToGridAfterDrop(!snapToGridAfterDrop)\r\n    }, [snapToGridAfterDrop])\r\n\r\n    const handleSnapToGridWhileDraggingChange = useCallback(() => {\r\n        setSnapToGridWhileDragging(!snapToGridWhileDragging)\r\n    }, [snapToGridWhileDragging])\r\n\r\n    return (\r\n        <DndProvider backend={HTML5Backend}>\r\n            <Container fluid>\r\n                {/* <Row>*/}\r\n                {/*     <Toolbar/>*/}\r\n                {/*</Row>*/}\r\n                <Row style={{\r\n                    height: 300\r\n                }}>\r\n                    <ComponentPanel/>\r\n                    <EditPanel snapToGrid={snapToGridAfterDrop}/>\r\n                    <CustomDragLayer snapToGrid={snapToGridWhileDragging}/>\r\n                </Row>\r\n            </Container>\r\n        </DndProvider>\r\n    )\r\n\r\n}",["84","85"],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\panel\\EditPanel.tsx",["86","87","88","89","90"],"import {CSSProperties, FC, useCallback, useState} from \"react\";\r\nimport {useDrop} from \"react-dnd\";\r\nimport {ItemTypes} from \"../ItemTypes\";\r\nimport {DragItem} from \"../dnd/DragItem\";\r\nimport {snapToGrid as doSnapToGrid} from '../dnd/snapToGrid'\r\nimport update from \"immutability-helper\";\r\n\r\nimport {IBlock} from \"../blocks/primitives/IBlock\";\r\nimport {CreatorBlock} from \"../blocks/factory/CreatorBlock\";\r\nimport {IBlockFactory} from \"../blocks/factory/IBlockFactory\";\r\nimport {BlockMap, RendrerManager} from \"../dnd/RendrerManager\";\r\n\r\n\r\nconst styles: CSSProperties = {\r\n    margin: 0,\r\n    float: \"right\",\r\n    width: \"79%\",\r\n    height: 400,\r\n    border: '1px solid black',\r\n    backgroundColor: 'aqua'\r\n    // position: 'relative',\r\n}\r\n\r\n\r\nexport interface EditPanelProps {\r\n    snapToGrid: boolean\r\n}\r\n\r\nconst renderManager = new RendrerManager()\r\n\r\n\r\nfunction getWidthComponentPanel(): number | null {\r\n    const element = document.getElementById(\"component_panel\")\r\n\r\n    if (element != null) {\r\n        return Number(element.offsetWidth)\r\n    } else\r\n        return null\r\n}\r\n\r\n//генерация уникального id\r\nfunction generateId(): string {\r\n    return `f${(~~(Math.random() * 1e8)).toString(16)}`\r\n}\r\n\r\nlet arBlock: Array<IBlock> = new Array<IBlock>()\r\n\r\nconst creator: IBlockFactory = new CreatorBlock()\r\n\r\nconst originalBlocks = creator.getOriginBlock()\r\n\r\nexport const EditPanel: FC<EditPanelProps> = ({snapToGrid}) => {\r\n    // const [blocks, setBlocks] = useState<BlockMap>({})\r\n\r\n    const moveBlock = useCallback(\r\n        (id: string, left: number, top: number) => {\r\n            let flag = false\r\n            console.log(\"elements \" + id + \" \" + left + \" \" + top)\r\n            //проверка - блок добавляется с панели перечисления\r\n            // возможных компонентов (Component Panel) или нет\r\n            Object.keys(originalBlocks).map((key) => {\r\n                    if (!key.localeCompare(id)) {\r\n                        flag = true\r\n                    }\r\n                }\r\n            )\r\n            if (flag) {\r\n                //создаем новый id для добавляемого блока\r\n                let idNew: string = generateId()\r\n                arBlock.push(creator.createBlock(\r\n                    originalBlocks[Number(id)].getTypeBlock(),\r\n                    // originalBlocks[Number(id)].getTitle(),\r\n                    left - getWidthComponentPanel()!!,\r\n                    top,\r\n                    idNew\r\n                )!!)\r\n\r\n                // setBlocks(\r\n                //     prevState => ({\r\n                //         ...prevState,\r\n                //         [idNew]: {\r\n                //             top: top,\r\n                //             left: left - getWidthComponentPanel()!!,\r\n                //             title: originalBlocks[Number(id)].getTitle(),\r\n                //             typeBlock: originalBlocks[Number(id)].getTypeBlock()\r\n                //\r\n                //         }\r\n                //     })\r\n                // )\r\n            } else {\r\n                // console.log(\"id items \" + arBlock.length)\r\n                // console.log(\"id items \" +\r\n                //     arBlock[Number(id)].getTypeBlock() + \" \" + arBlock[Number(id)].getTitle())\r\n\r\n                // setBlocks(\r\n                //     update(blocks, {\r\n                //         [id]: {\r\n                //             $merge: {left, top},\r\n                //         },\r\n                //     }),\r\n                // )\r\n            }\r\n\r\n            // arBlock.forEach(value => {\r\n            //     console.log(\"id=\" + value)\r\n            // })\r\n            //\r\n            // console.log(\"list \" + arBlock.length)\r\n\r\n        },\r\n        [arBlock],\r\n    )\r\n\r\n    const [, drop] = useDrop({\r\n        accept: ItemTypes.BLOCK,\r\n        drop(item: DragItem, monitor) {\r\n            const delta = monitor.getDifferenceFromInitialOffset() as {\r\n                x: number\r\n                y: number\r\n            }\r\n\r\n            let left = Math.round(item.left + delta.x)\r\n            let top = Math.round(item.top + delta.y)\r\n\r\n            if (snapToGrid) {\r\n                ;[left, top] = doSnapToGrid(left, top)\r\n            }\r\n            console.log(\"element in drop \" + item.id)\r\n            moveBlock(item.id, left, top)\r\n            return undefined\r\n        },\r\n    })\r\n\r\n    return (\r\n\r\n        <div>\r\n            <div ref={drop} style={styles}>\r\n                {/*{Object.keys(arBlock).map((key) =>*/}\r\n                {/*    renderManager.render(renderManager.convert(arBlock)))}*/}\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\panel\\ComponentPanel.tsx",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\ItemTypes.ts",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\primitives\\SubroutineBlockEx.tsx",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\primitives\\BlockTypes.ts",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\primitives\\ParentBlock.tsx",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\primitives\\ConditionBlock.tsx",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\factory\\originBlocks.tsx",[],["91","92"],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\dnd\\CustomDragLayer.tsx",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\dnd\\BlockDragPreview.tsx",["93"],"import {CSSProperties, FC, memo, useEffect, useState} from \"react\";\r\n\r\n/**\r\n * Рисует блок при dnd\r\n */\r\nconst styles: CSSProperties = {\r\n    display: 'inline-block',\r\n    transform: 'rotate(-7deg)',\r\n    WebkitTransform: 'rotate(-7deg)',\r\n}\r\n\r\nexport interface BlockDragPreviewProps {\r\n    title: string\r\n    typeBlock: string\r\n}\r\n\r\nexport const BlockDragPreview: FC<BlockDragPreviewProps> = memo(({title}, {typeBlock}) => {\r\n        const [tickTock, setTickTock] = useState(false)\r\n\r\n        useEffect(\r\n            function subscribeToIntervalTick() {\r\n                const interval = setInterval(() => setTickTock(!tickTock), 500)\r\n                return () => clearInterval(interval)\r\n            },\r\n            [tickTock]\r\n        )\r\n\r\n\r\n\r\n        return (\r\n            <div style={styles}>\r\n                {/*<SubroutineBlockEx title={typeBlock} yellow={tickTock} left={0} top={0}/>*/}\r\n            </div>\r\n        )\r\n    }\r\n)","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\dnd\\DraggableBlock.tsx",["94","95"],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\dnd\\snapToGrid.ts",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\dnd\\RendrerManager.tsx",["96","97"],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\primitives\\IBlock.tsx",["98"],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\factory\\CreatorBlock.tsx",[],{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","severity":1,"message":"104","line":13,"column":11,"nodeType":"105","messageId":"106","endLine":13,"endColumn":42},{"ruleId":"103","severity":1,"message":"107","line":17,"column":11,"nodeType":"105","messageId":"106","endLine":17,"endColumn":46},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","severity":1,"message":"108","line":1,"column":41,"nodeType":"105","messageId":"106","endLine":1,"endColumn":49},{"ruleId":"103","severity":1,"message":"109","line":6,"column":8,"nodeType":"105","messageId":"106","endLine":6,"endColumn":14},{"ruleId":"103","severity":1,"message":"110","line":11,"column":9,"nodeType":"105","messageId":"106","endLine":11,"endColumn":17},{"ruleId":"111","severity":1,"message":"112","line":61,"column":51,"nodeType":"113","messageId":"114","endLine":61,"endColumn":53},{"ruleId":"115","severity":1,"message":"116","line":111,"column":9,"nodeType":"117","endLine":111,"endColumn":18,"suggestions":"118"},{"ruleId":"99","replacedBy":"119"},{"ruleId":"101","replacedBy":"120"},{"ruleId":"103","severity":1,"message":"121","line":2,"column":9,"nodeType":"105","messageId":"106","endLine":2,"endColumn":26},{"ruleId":"103","severity":1,"message":"122","line":6,"column":9,"nodeType":"105","messageId":"106","endLine":6,"endColumn":29},{"ruleId":"115","severity":1,"message":"123","line":53,"column":8,"nodeType":"117","endLine":53,"endColumn":10,"suggestions":"124"},{"ruleId":"103","severity":1,"message":"125","line":3,"column":9,"nodeType":"105","messageId":"106","endLine":3,"endColumn":19},{"ruleId":"103","severity":1,"message":"126","line":23,"column":21,"nodeType":"105","messageId":"106","endLine":23,"endColumn":32},{"ruleId":"103","severity":1,"message":"127","line":1,"column":9,"nodeType":"105","messageId":"106","endLine":1,"endColumn":19},"no-native-reassign",["128"],"no-negated-in-lhs",["129"],"@typescript-eslint/no-unused-vars","'handleSnapToGridAfterDropChange' is assigned a value but never used.","Identifier","unusedVar","'handleSnapToGridWhileDraggingChange' is assigned a value but never used.","'useState' is defined but never used.","'update' is defined but never used.","'BlockMap' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useCallback has an unnecessary dependency: 'arBlock'. Either exclude it or remove the dependency array. Outer scope values like 'arBlock' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["130"],["128"],["129"],"'SubroutineBlockEx' is defined but never used.","'ConditionBlockParent' is defined but never used.","React Hook useEffect has a missing dependency: 'preview'. Either include it or remove the dependency array.",["131"],"'BlockTypes' is defined but never used.","'key' is assigned a value but never used.","'BlockProps' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"132","fix":"133"},{"desc":"134","fix":"135"},"Update the dependencies array to be: []",{"range":"136","text":"137"},"Update the dependencies array to be: [preview]",{"range":"138","text":"139"},[3675,3684],"[]",[1740,1742],"[preview]"]