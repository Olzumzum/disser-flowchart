[{"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\index.js":"1","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\reportWebVitals.js":"2","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\EditorApp.tsx":"3","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\panel\\CustomDragLayer.tsx":"4","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\panel\\EditPanel.tsx":"5","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\panel\\ComponentPanel.tsx":"6","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\snapToGrid.ts":"7","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\ItemTypes.ts":"8","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\BlockDragPreview.tsx":"9","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\DraggableBlock.tsx":"10","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\BlockTypes.ts":"11","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\ConditionBlock.tsx":"12","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\ParentBlock.tsx":"13","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\SubroutineBlockEx.tsx":"14","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\CreatorBlock.tsx":"15"},{"size":376,"mtime":1613302676500,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":499162500000,"results":"18","hashOfConfig":"17"},{"size":1415,"mtime":1613302676487,"results":"19","hashOfConfig":"17"},{"size":2096,"mtime":1613302676495,"results":"20","hashOfConfig":"17"},{"size":3792,"mtime":1613715350995,"results":"21","hashOfConfig":"17"},{"size":1170,"mtime":1613810175533,"results":"22","hashOfConfig":"17"},{"size":196,"mtime":1613302676499,"results":"23","hashOfConfig":"17"},{"size":50,"mtime":1613302676535,"results":"24","hashOfConfig":"17"},{"size":835,"mtime":1613810901245,"results":"25","hashOfConfig":"17"},{"size":1712,"mtime":1613818003699,"results":"26","hashOfConfig":"17"},{"size":394,"mtime":1613810264692,"results":"27","hashOfConfig":"17"},{"size":817,"mtime":1613817846307,"results":"28","hashOfConfig":"17"},{"size":1052,"mtime":1613810051312,"results":"29","hashOfConfig":"17"},{"size":803,"mtime":1613816799811,"results":"30","hashOfConfig":"17"},{"size":660,"mtime":1613818003706,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"jcib30",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\index.js",[],["70","71"],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\reportWebVitals.js",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\EditorApp.tsx",["72","73"],"import {FC, useCallback, useState} from \"react\";\r\nimport {CustomDragLayer} from \"./panel/CustomDragLayer\";\r\nimport {EditPanel} from \"./panel/EditPanel\"\r\nimport {DndProvider} from \"react-dnd\";\r\nimport {HTML5Backend} from \"react-dnd-html5-backend\";\r\nimport {ComponentPanel} from \"./panel/ComponentPanel\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\n\r\nexport const EditorApp: FC = () => {\r\n    const [snapToGridAfterDrop, setSnapToGridAfterDrop] = useState(false)\r\n    const [snapToGridWhileDragging, setSnapToGridWhileDragging] = useState(false)\r\n\r\n    const handleSnapToGridAfterDropChange = useCallback(() => {\r\n        setSnapToGridAfterDrop(!snapToGridAfterDrop)\r\n    }, [snapToGridAfterDrop])\r\n\r\n    const handleSnapToGridWhileDraggingChange = useCallback(() => {\r\n        setSnapToGridWhileDragging(!snapToGridWhileDragging)\r\n    }, [snapToGridWhileDragging])\r\n\r\n    return (\r\n        <DndProvider backend={HTML5Backend}>\r\n            <Container fluid>\r\n                {/* <Row>*/}\r\n                {/*     <Toolbar/>*/}\r\n                {/*</Row>*/}\r\n                <Row style={{\r\n                    height: 300\r\n                }}>\r\n                    <ComponentPanel/>\r\n                    <EditPanel snapToGrid={snapToGridAfterDrop}/>\r\n                    <CustomDragLayer snapToGrid={snapToGridWhileDragging}/>\r\n                </Row>\r\n            </Container>\r\n        </DndProvider>\r\n    )\r\n\r\n}",["74","75"],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\panel\\CustomDragLayer.tsx",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\panel\\EditPanel.tsx",["76"],"import {CSSProperties, FC, useCallback, useState} from \"react\";\r\nimport {DraggableBlock} from \"../blocks/DraggableBlock\";\r\nimport {useDrop} from \"react-dnd\";\r\nimport {ItemTypes} from \"../ItemTypes\";\r\nimport {DragItem} from \"../DragItem\";\r\nimport {snapToGrid as doSnapToGrid} from '../snapToGrid'\r\nimport {originalBlocks} from \"./ComponentPanel\";\r\nimport update from \"immutability-helper\";\r\n\r\n\r\nconst styles: CSSProperties = {\r\n    margin: 0,\r\n    float: \"right\",\r\n    width: \"79%\",\r\n    height: 400,\r\n    border: '1px solid black',\r\n    backgroundColor: 'aqua'\r\n    // position: 'relative',\r\n}\r\n\r\nexport interface EditPanelProps {\r\n    snapToGrid: boolean\r\n}\r\n\r\n//интерфейс имеющихся для отображения блоков\r\nexport interface BlockMap {\r\n    [key: string]: { top: number; left: number; title: string, typeBlock: string }\r\n}\r\n\r\n//отображает перетаскиваемые блоки\r\nexport function renderBlock(item: any, key: any) {\r\n    return <DraggableBlock key={key} id={key} {...item} />\r\n}\r\n\r\nfunction getWidthComponentPanel(): number | null {\r\n    const element = document.getElementById(\"component_panel\")\r\n\r\n    if (element != null) {\r\n        return Number(element.offsetWidth)\r\n    } else\r\n        return null\r\n}\r\n\r\n//генерация уникального id\r\nfunction generateId(): string {\r\n    return `f${(~~(Math.random() * 1e8)).toString(16)}`\r\n}\r\n\r\n\r\nexport const EditPanel: FC<EditPanelProps> = ({snapToGrid}) => {\r\n    const [blocks, setBlocks] = useState<BlockMap>({})\r\n\r\n    const moveBlock = useCallback(\r\n        (id: string, left: number, top: number) => {\r\n            let flag = false\r\n            //проверка - блок добавляется с панели перечисления\r\n            // возможных компонентов (Component Panel) или нет\r\n            Object.keys(originalBlocks).map((key) => {\r\n                    if (!key.localeCompare(id)) {\r\n                        flag = true\r\n                    }\r\n                }\r\n            )\r\n            if (flag) {\r\n                //создаем новый id для добавляемого блока\r\n                let idNew: string = generateId()\r\n                setBlocks(\r\n                    prevState => ({\r\n                        ...prevState,\r\n                        [idNew]: {top: top,\r\n                            left: left - getWidthComponentPanel()!!,\r\n                            title: originalBlocks[id].title,\r\n                            typeBlock: originalBlocks[id].typeBlock\r\n\r\n                        }\r\n                    })\r\n                )\r\n            } else {\r\n                setBlocks(\r\n                    update(blocks, {\r\n                        [id]: {\r\n                            $merge: {left, top},\r\n                        },\r\n                    }),\r\n                )\r\n            }\r\n        },\r\n        [blocks],\r\n    )\r\n\r\n    const [, drop] = useDrop({\r\n        accept: ItemTypes.BLOCK,\r\n        drop(item: DragItem, monitor) {\r\n            const delta = monitor.getDifferenceFromInitialOffset() as {\r\n                x: number\r\n                y: number\r\n            }\r\n\r\n            let left = Math.round(item.left + delta.x)\r\n            let top = Math.round(item.top + delta.y)\r\n\r\n            if (snapToGrid) {\r\n                ;[left, top] = doSnapToGrid(left, top)\r\n            }\r\n\r\n            moveBlock(item.id, left, top)\r\n            return undefined\r\n        },\r\n    })\r\n\r\n    for (var d in blocks) {\r\n        console.log(\"value \" + d + \" \")\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n            <div ref={drop} style={styles}>\r\n                {Object.keys(blocks).map((key) => renderBlock(blocks[key], key))}\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\panel\\ComponentPanel.tsx",["77","78","79","80","81","82","83","84","85","86"],"import {Col} from \"react-bootstrap\";\r\nimport {DraggableBlock} from \"../blocks/DraggableBlock\";\r\nimport {CSSProperties, useCallback, useState} from \"react\";\r\nimport {BlockMap, renderBlock} from \"./EditPanel\";\r\nimport {useDrop} from \"react-dnd\";\r\nimport {ItemTypes} from \"../ItemTypes\";\r\nimport {DragItem} from \"../DragItem\";\r\nimport {snapToGrid as doSnapToGrid} from \"../snapToGrid\";\r\nimport update from \"immutability-helper\";\r\nimport {BlockTypes} from \"../blocks/BlockTypes\";\r\n\r\nconst styles: CSSProperties = {\r\n    margin: 0,\r\n    float: \"left\",\r\n    height: 400,\r\n    width: \"20%\",\r\n    backgroundColor: 'darkgray',\r\n}\r\n\r\n\r\nexport let originalBlocks: any = {\r\n    a13: {top: 0, left: 0, title: 'Condition', typeBlock: BlockTypes.CONDITION},\r\n    a23: {top: 70, left: 0, title: 'Orig 2', typeBlock: BlockTypes.BLOCK},\r\n    a24: {top: 70, left: 0, title: 'Orig 2', typeBlock: BlockTypes.LOOP},\r\n}\r\n\r\nexport const ComponentPanel = () => {\r\n\r\n    return(\r\n        <div >\r\n            <div id={\"component_panel\"} style={styles}>\r\n                {Object.keys(originalBlocks).map((key) => renderBlock(originalBlocks[key], key))}\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\snapToGrid.ts",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\ItemTypes.ts",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\BlockDragPreview.tsx",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\DraggableBlock.tsx",["87"],"import {CSSProperties, FC, useEffect} from \"react\";\r\nimport {DragSourceMonitor, useDrag} from \"react-dnd\";\r\nimport {ItemTypes} from \"../ItemTypes\";\r\nimport {getEmptyImage} from \"react-dnd-html5-backend\";\r\nimport {BlockFactory, CreatorBlock} from \"./CreatorBlock\";\r\n\r\nfunction getStyles(\r\n    left: number,\r\n    top: number,\r\n    isDragging: boolean\r\n): CSSProperties {\r\n    const transform = `translate3d(${left}px, ${top}px, 0)`\r\n    return {\r\n        position: 'absolute',\r\n        transform,\r\n        WebkitTransform: transform,\r\n        // IE fallback: hide the real node using CSS when dragging\r\n        // because IE will ignore our custom \"empty image\" drag preview.\r\n        opacity: isDragging ? 0 : 1,\r\n        height: isDragging ? 0 : '',\r\n    }\r\n}\r\n\r\nexport interface DraggableBlockProps {\r\n    id: string\r\n    title: string\r\n    left: number\r\n    top: number\r\n    typeBlock: string\r\n}\r\n\r\nfunction selectTypeBlock(typeBlock: string, title: string) {\r\n    const blockFactory: BlockFactory = new CreatorBlock()\r\n    return blockFactory.createBlock(typeBlock, title)\r\n}\r\n\r\n\r\nexport const DraggableBlock: FC<DraggableBlockProps> = (props) => {\r\n    const {id, title, left, top, typeBlock} = props\r\n    const [{isDragging}, drag, preview] = useDrag({\r\n        item: {type: ItemTypes.BLOCK, id, left, top, title, typeBlock},\r\n        collect: (monitor: DragSourceMonitor) => ({\r\n            isDragging: monitor.isDragging(),\r\n        }),\r\n    })\r\n\r\n\r\n    useEffect(() => {\r\n        preview(getEmptyImage(), {captureDraggingState: true})\r\n    }, [])\r\n\r\n    return (\r\n        <div ref={drag} style={getStyles(left, top, isDragging)}>\r\n            {selectTypeBlock(typeBlock, title)}\r\n        </div>\r\n    )\r\n}","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\BlockTypes.ts",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\ConditionBlock.tsx",["88"],"import { ParentBlock, BlockProps} from \"./ParentBlock\";\r\nimport {CSSProperties, FC, useState} from \"react\";\r\nimport blockImage from \"./block.png\";\r\nimport {IBlock} from \"./IBlock\";\r\n\r\n\r\n\r\nclass ConditionBlockParent implements IBlock{\r\n\r\n    private parentBlock: ParentBlock = new ParentBlock()\r\n\r\n    get style(): CSSProperties{\r\n        const style = this.parentBlock.style\r\n        style.backgroundImage = `url(${blockImage})`\r\n        return style\r\n    }\r\n\r\n    private _blockCond: FC<BlockProps> = ({title, yellow}) => {\r\n        const background = yellow ? 'yellow' : blockImage\r\n        return <div style={{...this.style, background}}>{title}</div>\r\n    }\r\n\r\n\r\n\r\n    get block(): React.FC<BlockProps> {\r\n        return this._blockCond;\r\n    }\r\n}\r\n\r\nexport const ConditionBlock = new ConditionBlockParent().block","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\ParentBlock.tsx",["89"],"import {CSSProperties, FC} from \"react\";\r\nimport blockImage from \"./block.png\";\r\n\r\n/**\r\n * Родитель всех блоков\r\n * хранит всю основную информацию\r\n */\r\n\r\nexport interface BlockProps {\r\n    title: string\r\n    yellow?: boolean\r\n}\r\n\r\nexport class ParentBlock {\r\n\r\n    protected styles: CSSProperties = {\r\n        border: '1px dashed gray',\r\n        padding: '0.5rem 1rem',\r\n        cursor: 'move',\r\n        width: \"40px\",\r\n        height: \"40px\",\r\n        backgroundSize: 'cover',\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundPosition: 'contain',\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        margin: \"10px\"\r\n    }\r\n\r\n\r\n    private _block: FC<BlockProps> = ({title, yellow}) => {\r\n        const background = yellow ? 'yellow' : 'white'\r\n        return <div style={{...this.styles, background}}>{title}</div>\r\n    }\r\n\r\n\r\n    get block(): React.FC<BlockProps> {\r\n        return this._block;\r\n    }\r\n\r\n    get style(): CSSProperties {\r\n        return this.styles\r\n    }\r\n}\r\n","C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\SubroutineBlockEx.tsx",[],"C:\\Users\\evdok\\IdeaProjects\\disser-flowchart\\src\\editor\\blocks\\CreatorBlock.tsx",[],{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","severity":1,"message":"95","line":13,"column":11,"nodeType":"96","messageId":"97","endLine":13,"endColumn":42},{"ruleId":"94","severity":1,"message":"98","line":17,"column":11,"nodeType":"96","messageId":"97","endLine":17,"endColumn":46},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"99","severity":1,"message":"100","line":58,"column":51,"nodeType":"101","messageId":"102","endLine":58,"endColumn":53},{"ruleId":"94","severity":1,"message":"103","line":1,"column":9,"nodeType":"96","messageId":"97","endLine":1,"endColumn":12},{"ruleId":"94","severity":1,"message":"104","line":2,"column":9,"nodeType":"96","messageId":"97","endLine":2,"endColumn":23},{"ruleId":"94","severity":1,"message":"105","line":3,"column":24,"nodeType":"96","messageId":"97","endLine":3,"endColumn":35},{"ruleId":"94","severity":1,"message":"106","line":3,"column":37,"nodeType":"96","messageId":"97","endLine":3,"endColumn":45},{"ruleId":"94","severity":1,"message":"107","line":4,"column":9,"nodeType":"96","messageId":"97","endLine":4,"endColumn":17},{"ruleId":"94","severity":1,"message":"108","line":5,"column":9,"nodeType":"96","messageId":"97","endLine":5,"endColumn":16},{"ruleId":"94","severity":1,"message":"109","line":6,"column":9,"nodeType":"96","messageId":"97","endLine":6,"endColumn":18},{"ruleId":"94","severity":1,"message":"110","line":7,"column":9,"nodeType":"96","messageId":"97","endLine":7,"endColumn":17},{"ruleId":"94","severity":1,"message":"111","line":8,"column":23,"nodeType":"96","messageId":"97","endLine":8,"endColumn":35},{"ruleId":"94","severity":1,"message":"112","line":9,"column":8,"nodeType":"96","messageId":"97","endLine":9,"endColumn":14},{"ruleId":"113","severity":1,"message":"114","line":50,"column":8,"nodeType":"115","endLine":50,"endColumn":10,"suggestions":"116"},{"ruleId":"94","severity":1,"message":"106","line":2,"column":28,"nodeType":"96","messageId":"97","endLine":2,"endColumn":36},{"ruleId":"94","severity":1,"message":"117","line":2,"column":8,"nodeType":"96","messageId":"97","endLine":2,"endColumn":18},"no-native-reassign",["118"],"no-negated-in-lhs",["119"],"@typescript-eslint/no-unused-vars","'handleSnapToGridAfterDropChange' is assigned a value but never used.","Identifier","unusedVar","'handleSnapToGridWhileDraggingChange' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Col' is defined but never used.","'DraggableBlock' is defined but never used.","'useCallback' is defined but never used.","'useState' is defined but never used.","'BlockMap' is defined but never used.","'useDrop' is defined but never used.","'ItemTypes' is defined but never used.","'DragItem' is defined but never used.","'doSnapToGrid' is defined but never used.","'update' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'preview'. Either include it or remove the dependency array.","ArrayExpression",["120"],"'blockImage' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"121","fix":"122"},"Update the dependencies array to be: [preview]",{"range":"123","text":"124"},[1551,1553],"[preview]"]